<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="GeoTest" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1445823459000</longProp>
        <longProp name="ThreadGroup.end_time">1445823459000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8081</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;event&quot;: &quot;end&quot;,&#xd;
&quot;tripId&quot;: 422,&#xd;
&quot;lat&quot;: 37.79947,&#xd;
&quot;lng&quot;: -122.511635,&#xd;
&quot;epoch&quot;: 1392864673040,&#xd;
&quot;fare&quot;: 40.0&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8081</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">100</stringProp>
          <stringProp name="HTTPSampler.response_timeout">100</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">addEvent</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name"></stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.config.Argument;
import org.apache.jmeter.config.Arguments;
import org.apache.jmeter.samplers.Sampler;
import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
import org.json.*;

Arguments arguments = sampler.getArguments();
for (int i=0;i&lt;arguments.getArgumentCount();i++)
{
    Argument argument = arguments.getArgument(i);
    String name = argument.getName();
    String value = argument.getValue();

    String stepsStr = vars.get(&quot;steps&quot;);
    int steps = Integer.parseInt(stepsStr);

    int number = ctx.getThreadNum();
    String tripIdKeyForThread = &quot;tripId&quot; + number;
    
    String tripIdStr = vars.get(tripIdKeyForThread);
    int tripId = Integer.parseInt(tripIdStr);
    String posCountStr = vars.get(&quot;posCount&quot;);
    int posCount = Integer.parseInt(posCountStr);
    String event = &quot;update&quot;;
    if(posCount == 0) event = &quot;begin&quot;;
    if(posCount == steps) event = &quot;end&quot;;

    String startLatStr = vars.get(&quot;startLat&quot;);
    String startLngStr = vars.get(&quot;startLng&quot;);
    
    double startLat = Double.parseDouble(startLatStr);
    double startLng = Double.parseDouble(startLngStr);

    String startLatBaseStr = vars.get(&quot;startLatBase&quot;);
    String startLngBaseStr = vars.get(&quot;startLngBase&quot;);
    
    double startLatBase = Double.parseDouble(startLatBaseStr);
    double startLngBase = Double.parseDouble(startLngBaseStr);

    double r = Math.random()*0.0006;
    double lat = startLat + (steps-posCount)*r;
    lat = Math.round(lat*1000000)/1000000.0;

    r = Math.random()*0.0006;
    double lng = startLng + posCount*r;
    lng = Math.round(lng*1000000)/1000000.0;

    log.info(&quot;tripId &quot; + tripId + &quot; &quot; + posCount + &quot; &quot; + lat + &quot; &quot; + lng);

    JSONObject obj = new JSONObject(value);
    obj.put(&quot;event&quot;, event);
    obj.put(&quot;tripId&quot;, tripId);
    obj.put(&quot;lat&quot;, lat);
    obj.put(&quot;lng&quot;, lng);
    obj.put(&quot;epoch&quot;, System.currentTimeMillis());
    
    log.info(&quot;new json &quot; + obj.toString());
    argument.setValue(obj.toString());

    if(posCount == steps) {
    	 tripId ++;
    	 posCount = 0;
    	 vars.put(tripIdKeyForThread,&quot;&quot;+tripId);
    	 vars.put(&quot;posCount&quot;, &quot;&quot;+posCount);

    	 // randomize the start position
    	 Random rx = new Random();
    	 // move start lat/lng in +/- 1.0 range
    	 double rangeMin = -1.0;
    	 double rangeMax = 1.0;
      double randomValueInRange = rangeMin + (rangeMax - rangeMin) * rx.nextDouble();
    	 vars.put(&quot;startLat&quot;, &quot;&quot;+(startLatBase + randomValueInRange));
    	 randomValueInRange = rangeMin + (rangeMax - rangeMin) * rx.nextDouble();
    	 vars.put(&quot;startLng&quot;, &quot;&quot;+(startLngBase + randomValueInRange));
    } else {
    	 posCount ++;
    	 vars.put(&quot;posCount&quot;, &quot;&quot;+posCount);
    }

}</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="posCount" elementType="Argument">
                <stringProp name="Argument.name">posCount</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startLatBase" elementType="Argument">
                <stringProp name="Argument.name">startLatBase</stringProp>
                <stringProp name="Argument.value">37.79947</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startLngBase" elementType="Argument">
                <stringProp name="Argument.name">startLngBase</stringProp>
                <stringProp name="Argument.value">-122.511635</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="steps" elementType="Argument">
                <stringProp name="Argument.name">steps</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startLat" elementType="Argument">
                <stringProp name="Argument.name">startLat</stringProp>
                <stringProp name="Argument.value">37.79947</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startLng" elementType="Argument">
                <stringProp name="Argument.name">startLng</stringProp>
                <stringProp name="Argument.value">-122.511635</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId0" elementType="Argument">
                <stringProp name="Argument.name">tripId0</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId1" elementType="Argument">
                <stringProp name="Argument.name">tripId1</stringProp>
                <stringProp name="Argument.value">100000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId2" elementType="Argument">
                <stringProp name="Argument.name">tripId2</stringProp>
                <stringProp name="Argument.value">200000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId3" elementType="Argument">
                <stringProp name="Argument.name">tripId3</stringProp>
                <stringProp name="Argument.value">300000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId4" elementType="Argument">
                <stringProp name="Argument.name">tripId4</stringProp>
                <stringProp name="Argument.value">400000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId5" elementType="Argument">
                <stringProp name="Argument.name">tripId5</stringProp>
                <stringProp name="Argument.value">500000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId6" elementType="Argument">
                <stringProp name="Argument.name">tripId6</stringProp>
                <stringProp name="Argument.value">60000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId7" elementType="Argument">
                <stringProp name="Argument.name">tripId7</stringProp>
                <stringProp name="Argument.value">700000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId8" elementType="Argument">
                <stringProp name="Argument.name">tripId8</stringProp>
                <stringProp name="Argument.value">800000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tripId9" elementType="Argument">
                <stringProp name="Argument.name">tripId9</stringProp>
                <stringProp name="Argument.value">900000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>5000.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
